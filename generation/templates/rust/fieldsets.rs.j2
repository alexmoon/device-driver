/// Module containing the generated fieldsets of the registers and commands
pub mod field_sets {
    use super::*;

    {% for field_set in device.field_sets %}
        {{field_set.doc_attr}}
        {{field_set.cfg_attr}}
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct {{field_set.name}} {
            /// The internal bits
            bits: [u8; {{field_set.size_bytes()}}]
        }

        impl ::device_driver::FieldSet for {{field_set.name}} {
            const SIZE_BITS: u32 = 8;
            fn new_with_zero() -> Self {
                Self::new_zero()
            }
            fn get_inner_buffer(&self) -> &[u8] {
                &self.bits
            }
            fn get_inner_buffer_mut(&mut self) -> &mut [u8] {
                &mut self.bits
            }
        }

        impl {{field_set.name}} {
            /// Create a new instance, loaded with the reset value (if any)
            pub const fn new() -> Self {
                Self { bits: [{{field_set.reset_value | join(", ")}}] }
            }
            /// Create a new instance, loaded with all zeroes
            pub const fn new_zero() -> Self {
                Self { bits: [0; {{field_set.size_bytes()}}] }
            }

            {% for (override_name, override_reset_value) in field_set.ref_reset_overrides %}
                {% let override_name_snake = convert_case::Casing::to_case(*override_name, convert_case::Case::Snake) %}

                ///Create a new instance, loaded with the reset value of the `{{override_name}}` ref
                pub const fn new_as_{{override_name_snake}}() -> Self {
                    Self { bits: [{{override_reset_value | join(", ")}}] }
                }
            {% endfor %}

            {% for field in field_set.fields %}

            {% endfor %}
        }
    {% endfor %}

    /// Enum containing all possible field set types
    pub enum FieldSetValue {}
    impl core::fmt::Debug for FieldSetValue {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                _ => unreachable!(),
            } 
        }
    }
}
